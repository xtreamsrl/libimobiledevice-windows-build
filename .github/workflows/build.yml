name: build

on:
  push:
  workflow_dispatch:

env:
  github_token: ${{secrets.GITHUB_TOKEN}}

jobs:
  build-windows:
    runs-on: windows-2019
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      fail-fast: false
      matrix:
        include: [
          { msystem: mingw64, arch: x86_64 }
        ]
    steps:
    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msystem }}
        release: false
        update: false
        install: >-
          base-devel
          git
          mingw-w64-${{ matrix.arch }}-gcc
          make
          libtool
          autoconf
          automake-wrapper
          mingw-w64-${{ matrix.arch }}-libzip
          mingw-w64-${{ matrix.arch }}-github-cli

    - name: prepare environment
      run: |
        echo "target_triplet=`gcc -dumpmachine`" >> $GITHUB_ENV
        git config --global core.autocrlf false

    # deps relevant to libimobiledevice specifically
    - name: build libplist
      run: |
        git clone --depth=1 --recursive https://github.com/libimobiledevice/libplist
        cd libplist/
        ./autogen.sh CC=gcc CXX=g++ --enable-debug --without-cython
        make -j install

    - name: build libimobiledevice-glue
      run: |
        git clone --depth=1 --recursive https://github.com/libimobiledevice/libimobiledevice-glue
        cd libimobiledevice-glue/
        ./autogen.sh CC=gcc CXX=g++ --enable-debug --without-cython
        make -j install

    - name: build libusbmuxd
      run: |
        git clone --depth=1 --recursive https://github.com/libimobiledevice/libusbmuxd
        cd libusbmuxd/
        ./autogen.sh CC=gcc CXX=g++ --enable-debug --without-cython
        make -j install

    - uses: actions/checkout@v3
    - name: autogen and make install
      run: |
        ./autogen.sh CC=gcc CXX=g++ --enable-debug --without-cython
        make -j install

    # other unrelated libimobiledevice projects
    - name: build libideviceactivation
      run: |
        git clone --depth=1 --recursive https://github.com/libimobiledevice/libideviceactivation
        cd libideviceactivation/
        ./autogen.sh CC=gcc CXX=g++ --enable-debug --without-cython
        make -j install

    - name: build ideviceinstaller
      run: |
        git clone --depth=1 --recursive https://github.com/libimobiledevice/ideviceinstaller
        cd ideviceinstaller/
        ./autogen.sh CC=gcc CXX=g++ --enable-debug --without-cython
        make -j install

    - name: build libirecovery
      run: |
        git clone --depth=1 --recursive https://github.com/libimobiledevice/libirecovery
        cd libirecovery/
        ./autogen.sh CC=gcc CXX=g++ --enable-debug --without-cython
        make -j install

    - name: build idevicerestore
      run: |
        git clone --depth=1 --recursive https://github.com/libimobiledevice/idevicerestore
        cd idevicerestore/
        ./autogen.sh CC=gcc CXX=g++ --enable-debug --without-cython
        make -j install

    - name: prepare release
      run: |
        mkdir -p rel
        find /mingw64/bin/ -type f \( -name "*idevice*" -o \
                                      -name "*irecovery*" -o \
                                      -name "libimobiledevice*" -o \
                                      -name "libplist*" -o \
                                      -name "plistutil.exe" -o \
                                      -name "libusbmuxd*" -o \
                                      -name "inetcat.exe" -o \
                                      -name "iproxy.exe" -o \
                                      -name "libcurl*.dll" -o \
                                      -name "libxml2*.dll" -o \
                                      -name "libzip*.dll" -o \
                                      -name "zlib*.dll" -o \
                                      -name "libreadline*.dll" -o \
                                      -name "libbrotli*.dll" -o \
                                      -name "libiconv*.dll" -o \
                                      -name "libunistring*.dll" -o \
                                      -name "libssh*.dll" -o \
                                      -name "libintl*.dll" -o \
                                      -name "libidn*.dll" -o \
                                      -name "libnghttp*.dll" -o \
                                      -name "libpsl*.dll" -o \
                                      -name "libbz2*.dll" -o \
                                      -name "liblzma*.dll" -o \
                                      -name "libzstd*.dll" -o \
                                      -name "libtermcap*.dll" -o \
                                      -name "libcrypto*.dll" -o \
                                      -name "libssl*.dll" \) \
                                      -exec cp -v {} rel \;
        tar -C rel -cJvf libimobile-suite-latest_${{ matrix.arch }}-${{ matrix.msystem }}.tar.xz .

    - name: publish release
      run: |
        TAG="${GITHUB_REF##*/}-${GITHUB_SHA:0:7}"
        gh release create "$TAG" --draft --title "Draft Release"
        gh release upload "$TAG" libimobile-suite-latest_${{ matrix.arch }}-${{ matrix.msystem }}.tar.xz
